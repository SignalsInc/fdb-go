// DO NOT EDIT THIS FILE BY HAND. This file was generated using
// translate_fdb_options.go, part of the fdb-go repository, and a copy of the
// fdb.options file (installed as part of the FoundationDB client, typically
// found as /usr/include/foundationdb/fdb.options).

// To regenerate this file, from the top level of an fdb-go repository checkout,
// run:
// $ go run translate_fdb_options.go < /usr/include/foundationdb/fdb.options > fdb/generated.go

package fdb

import (
	"bytes"
	"encoding/binary"
)

func int64ToBytes(i int64) ([]byte, error) {
	buf := new(bytes.Buffer)
	if e := binary.Write(buf, binary.LittleEndian, i); e != nil {
		return nil, e
	}
	return buf.Bytes(), nil
}

func (opt networkOptions) SetLocalAddress(param string) error {
	return opt.setOpt(10, []byte(param), len([]byte(param)))
}

func (opt networkOptions) SetClusterFile(param string) error {
	return opt.setOpt(20, []byte(param), len([]byte(param)))
}

func (opt networkOptions) SetTraceEnable(param string) error {
	return opt.setOpt(30, []byte(param), len([]byte(param)))
}

func (opt databaseOptions) SetLocationCacheSize(param int64) error {
	b, e := int64ToBytes(param)
	if e != nil {
		return e
	}
	return opt.setOpt(10, b, 8)
}

func (opt databaseOptions) SetMaxWatches(param int64) error {
	b, e := int64ToBytes(param)
	if e != nil {
		return e
	}
	return opt.setOpt(20, b, 8)
}

func (opt databaseOptions) SetMachineId(param string) error {
	return opt.setOpt(21, []byte(param), len([]byte(param)))
}

func (opt databaseOptions) SetDatacenterId(param string) error {
	return opt.setOpt(22, []byte(param), len([]byte(param)))
}

func (opt transactionOptions) SetCausalWriteRisky() error {
	return opt.setOpt(10, nil, 0)
}

func (opt transactionOptions) SetCausalReadRisky() error {
	return opt.setOpt(20, nil, 0)
}

func (opt transactionOptions) SetCausalReadDisable() error {
	return opt.setOpt(21, nil, 0)
}

func (opt transactionOptions) SetNextWriteNoWriteConflictRange() error {
	return opt.setOpt(30, nil, 0)
}

func (opt transactionOptions) SetCheckWritesEnable() error {
	return opt.setOpt(50, nil, 0)
}

func (opt transactionOptions) SetReadYourWritesDisable() error {
	return opt.setOpt(51, nil, 0)
}

func (opt transactionOptions) SetReadAheadDisable() error {
	return opt.setOpt(52, nil, 0)
}

func (opt transactionOptions) SetDurabilityDatacenter() error {
	return opt.setOpt(110, nil, 0)
}

func (opt transactionOptions) SetDurabilityRisky() error {
	return opt.setOpt(120, nil, 0)
}

func (opt transactionOptions) SetDurabilityDevNullIsWebScale() error {
	return opt.setOpt(130, nil, 0)
}

func (opt transactionOptions) SetPrioritySystemImmediate() error {
	return opt.setOpt(200, nil, 0)
}

func (opt transactionOptions) SetPriorityBatch() error {
	return opt.setOpt(201, nil, 0)
}

func (opt transactionOptions) SetInitializeNewDatabase() error {
	return opt.setOpt(300, nil, 0)
}

func (opt transactionOptions) SetAccessSystemKeys() error {
	return opt.setOpt(301, nil, 0)
}

func (opt transactionOptions) SetDebugDump() error {
	return opt.setOpt(400, nil, 0)
}

func (opt transactionOptions) SetTimeout(param int64) error {
	b, e := int64ToBytes(param)
	if e != nil {
		return e
	}
	return opt.setOpt(500, b, 8)
}

func (opt transactionOptions) SetRetryLimit(param int64) error {
	b, e := int64ToBytes(param)
	if e != nil {
		return e
	}
	return opt.setOpt(501, b, 8)
}

type StreamingMode int
const (
	StreamingModeWantAll StreamingMode = -2
	StreamingModeIterator StreamingMode = -1
	StreamingModeExact StreamingMode = 0
	StreamingModeSmall StreamingMode = 1
	StreamingModeMedium StreamingMode = 2
	StreamingModeLarge StreamingMode = 3
	StreamingModeSerial StreamingMode = 4
)

func (t *Transaction) Add(key []byte, param []byte) {
	t.atomicOp(key, param, 2)
}

func (t *Transaction) And(key []byte, param []byte) {
	t.atomicOp(key, param, 6)
}

func (t *Transaction) Or(key []byte, param []byte) {
	t.atomicOp(key, param, 7)
}

func (t *Transaction) Xor(key []byte, param []byte) {
	t.atomicOp(key, param, 8)
}

type ConflictRangeType int
const (
	ConflictRangeTypeRead ConflictRangeType = 0
	ConflictRangeTypeWrite ConflictRangeType = 1
)
